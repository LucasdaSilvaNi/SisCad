//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using Model.Data;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("Model.Data", "fk_cargo_atual_to_funcionario", "cargo", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Model.Data.cargo), "funcionario", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Model.Data.funcionario), true)]
[assembly: EdmRelationshipAttribute("Model.Data", "fk_cargo_contratado_to_funcionario", "cargo", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Model.Data.cargo), "funcionario", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Model.Data.funcionario), true)]
[assembly: EdmRelationshipAttribute("Model.Data", "fk_centro_custo_to_setor", "centro_custo", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Model.Data.centro_custo), "setor", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Model.Data.setor), true)]
[assembly: EdmRelationshipAttribute("Model.Data", "fk_departamento_to_setor", "departamento", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Model.Data.departamento), "setor", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Model.Data.setor), true)]
[assembly: EdmRelationshipAttribute("Model.Data", "fk_empresa_to_departamento", "empresa", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Model.Data.empresa), "departamento", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Model.Data.departamento), true)]
[assembly: EdmRelationshipAttribute("Model.Data", "fk_funcionario_to_dependente", "funcionario", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Model.Data.funcionario), "dependente", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Model.Data.dependente), true)]
[assembly: EdmRelationshipAttribute("Model.Data", "fk_empresa_to_funcionario", "empresa", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Model.Data.empresa), "funcionario", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Model.Data.funcionario), true)]
[assembly: EdmRelationshipAttribute("Model.Data", "fk_gestor_to_empresa", "gestor", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Model.Data.gestor), "empresa", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Model.Data.empresa), true)]
[assembly: EdmRelationshipAttribute("Model.Data", "fk_municipio_to_empresa", "municipio", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Model.Data.municipio), "empresa", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Model.Data.empresa), true)]
[assembly: EdmRelationshipAttribute("Model.Data", "fk_funcionario_to_ferias", "funcionario", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Model.Data.funcionario), "ferias", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Model.Data.ferias), true)]
[assembly: EdmRelationshipAttribute("Model.Data", "fk_funcionario_to_movimentacao", "funcionario", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Model.Data.funcionario), "movimentacao", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Model.Data.movimentacao), true)]
[assembly: EdmRelationshipAttribute("Model.Data", "fk_municipio_naturalidade_to_funcionario", "municipio", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Model.Data.municipio), "funcionario", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Model.Data.funcionario), true)]
[assembly: EdmRelationshipAttribute("Model.Data", "fk_municipio_to_funcionario", "municipio", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Model.Data.municipio), "funcionario", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Model.Data.funcionario), true)]
[assembly: EdmRelationshipAttribute("Model.Data", "fk_setor_to_funcionario", "setor", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Model.Data.setor), "funcionario", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Model.Data.funcionario), true)]

#endregion

namespace Model.Data
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class SisCadEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new SisCadEntities object using the connection string found in the 'SisCadEntities' section of the application configuration file.
        /// </summary>
        public SisCadEntities() : base("name=SisCadEntities", "SisCadEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new SisCadEntities object.
        /// </summary>
        public SisCadEntities(string connectionString) : base(connectionString, "SisCadEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new SisCadEntities object.
        /// </summary>
        public SisCadEntities(EntityConnection connection) : base(connection, "SisCadEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<cargo> cargo
        {
            get
            {
                if ((_cargo == null))
                {
                    _cargo = base.CreateObjectSet<cargo>("cargo");
                }
                return _cargo;
            }
        }
        private ObjectSet<cargo> _cargo;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<centro_custo> centro_custo
        {
            get
            {
                if ((_centro_custo == null))
                {
                    _centro_custo = base.CreateObjectSet<centro_custo>("centro_custo");
                }
                return _centro_custo;
            }
        }
        private ObjectSet<centro_custo> _centro_custo;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<departamento> departamento
        {
            get
            {
                if ((_departamento == null))
                {
                    _departamento = base.CreateObjectSet<departamento>("departamento");
                }
                return _departamento;
            }
        }
        private ObjectSet<departamento> _departamento;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<dependente> dependente
        {
            get
            {
                if ((_dependente == null))
                {
                    _dependente = base.CreateObjectSet<dependente>("dependente");
                }
                return _dependente;
            }
        }
        private ObjectSet<dependente> _dependente;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<empresa> empresa
        {
            get
            {
                if ((_empresa == null))
                {
                    _empresa = base.CreateObjectSet<empresa>("empresa");
                }
                return _empresa;
            }
        }
        private ObjectSet<empresa> _empresa;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ferias> ferias
        {
            get
            {
                if ((_ferias == null))
                {
                    _ferias = base.CreateObjectSet<ferias>("ferias");
                }
                return _ferias;
            }
        }
        private ObjectSet<ferias> _ferias;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<funcionario> funcionario
        {
            get
            {
                if ((_funcionario == null))
                {
                    _funcionario = base.CreateObjectSet<funcionario>("funcionario");
                }
                return _funcionario;
            }
        }
        private ObjectSet<funcionario> _funcionario;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<gestor> gestor
        {
            get
            {
                if ((_gestor == null))
                {
                    _gestor = base.CreateObjectSet<gestor>("gestor");
                }
                return _gestor;
            }
        }
        private ObjectSet<gestor> _gestor;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<movimentacao> movimentacao
        {
            get
            {
                if ((_movimentacao == null))
                {
                    _movimentacao = base.CreateObjectSet<movimentacao>("movimentacao");
                }
                return _movimentacao;
            }
        }
        private ObjectSet<movimentacao> _movimentacao;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<municipio> municipio
        {
            get
            {
                if ((_municipio == null))
                {
                    _municipio = base.CreateObjectSet<municipio>("municipio");
                }
                return _municipio;
            }
        }
        private ObjectSet<municipio> _municipio;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<setor> setor
        {
            get
            {
                if ((_setor == null))
                {
                    _setor = base.CreateObjectSet<setor>("setor");
                }
                return _setor;
            }
        }
        private ObjectSet<setor> _setor;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<usuario> usuario
        {
            get
            {
                if ((_usuario == null))
                {
                    _usuario = base.CreateObjectSet<usuario>("usuario");
                }
                return _usuario;
            }
        }
        private ObjectSet<usuario> _usuario;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the cargo EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTocargo(cargo cargo)
        {
            base.AddObject("cargo", cargo);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the centro_custo EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTocentro_custo(centro_custo centro_custo)
        {
            base.AddObject("centro_custo", centro_custo);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the departamento EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTodepartamento(departamento departamento)
        {
            base.AddObject("departamento", departamento);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the dependente EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTodependente(dependente dependente)
        {
            base.AddObject("dependente", dependente);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the empresa EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToempresa(empresa empresa)
        {
            base.AddObject("empresa", empresa);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ferias EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToferias(ferias ferias)
        {
            base.AddObject("ferias", ferias);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the funcionario EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTofuncionario(funcionario funcionario)
        {
            base.AddObject("funcionario", funcionario);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the gestor EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTogestor(gestor gestor)
        {
            base.AddObject("gestor", gestor);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the movimentacao EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTomovimentacao(movimentacao movimentacao)
        {
            base.AddObject("movimentacao", movimentacao);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the municipio EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTomunicipio(municipio municipio)
        {
            base.AddObject("municipio", municipio);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the setor EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTosetor(setor setor)
        {
            base.AddObject("setor", setor);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the usuario EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTousuario(usuario usuario)
        {
            base.AddObject("usuario", usuario);
        }

        #endregion
    }
    

    #endregion
    
}
